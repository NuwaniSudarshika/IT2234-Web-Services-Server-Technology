create a database librarydb
create a collection books
insert the following data
{
  "title": "The Hobbit",
  "author": "J.R.R. Tolkien",
  "published_year": 1937,
  "genres": ["Fantasy", "Adventure"],
  "pages": 310,
  "available": true,
  "rating": 4.8
}
[
  {
    "title": "1984",
    "author": "George Orwell",
    "published_year": 1949,
    "genres": ["Dystopian", "Political Fiction"],
    "pages": 328,
    "available": true,
    "rating": 4.7
  },
  {
    "title": "To Kill a Mockingbird",
    "author": "Harper Lee",
    "published_year": 1960,
    "genres": ["Southern Gothic", "Drama"],
    "pages": 281,
    "available": false,
    "rating": 4.6
  },
  {
    "title": "The Great Gatsby",
    "author": "F. Scott Fitzgerald",
    "published_year": 1925,
    "genres": ["Tragedy"],
    "pages": 180,
    "available": true,
    "rating": 4.4
  },
  {
    "title": "Brave New World",
    "author": "Aldous Huxley",
    "published_year": 1932,
    "genres": ["Science Fiction", "Dystopian"],
    "pages": 311,
    "available": true,
    "rating": 4.2
  }
]

01)Find all books
db.books.find()



02)Find all books published after 1950
db.books.find({'published_year': {$gt: 1950}})


03)Find the avilable books
db.books.find({'available':true})


04)Find all books that belong to the "Dystopian" genre
db.books.find({'genres':'Dystopian'})


05)Project only title and author fields:
db.books.find({},{title:1,author:1,_id:0}).pretty()


06)Update the book "1984" to set available: false:
db.books.updateOne({_id:ObjectId('680ef846d38c299a1a7795da')},{$set:{available:'false'}})
db.books.findOne({_id:ObjectId('680ef846d38c299a1a7795da')})


07)Increase the rating of "Brave New World" by +0.1:
db.books.updateMany({title:{'Brave New World}},{$inc:{duration:0.1}})
db.books.find()


08)Add a new genre "Classic" to "The Great Gatsby":

db.books.updateOne(
  { title: "The Great Gatsby" },
  { $addToSet: { genres: "Classic" } }
)


09)Sort books by published_year ascending:

db.books.find().sort({ published_year: 1 })


10)Sort books by rating descending:

db.books.find().sort({ rating: -1 })


11)Delete all books with a rating lower than 4.5:

db.books.deleteMany({ rating: { $lt: 4.5 } })

--------------------------------------------------------------------------------------------------------------------

use sampledb

db.dropDatabase()        //to drop a database

use checkdb

db.sampledata.drop()     //to drop  a collection

use unidb

-----in the "degrees" collection---------

//To deletae one data
db.degrees.deleteOne({_id:ObjectId('680eea81d38c299a1a7795d5')})


//To show the names of reserved data
db.degrees.find().projection(['name'])


//To show the IDs of reserved data
db.degrees.find().projection([{'name':1},{'_id':-1}])


//To show the entire details of reserved data
db.degrees.find().projection(['name','duration'])



//To show the name of reserved data as a proper way
db.degrees.find({},{name:1,_id:0}).pretty()


//To delete the data which the duration is less than 4
db.degrees.deleteMany({duration:{$lt:4}})


//To show the name of reserved data
db.degrees.find({},{name:1,_id:0}).pretty()


//To update one data
db.degrees.updateOne({_id:ObjectId('680eefa7d38c299a1a7795d6')},{$set:{name:'BIT',duration:3}})

//To find the updated data
db.degrees.findOne({_id:ObjectId('680eefa7d38c299a1a7795d6')})


//To update the duration by increasing 1 which the duraion is greater than 4
db.degrees.updateMany({duration:{$gte:4}},{$inc:{duration:1}})


//To show the details
db.degrees.find()







-----------------in the students collection-----------------


//To update the data of an array
db.students.updateOne({regno:'2021IT01'},{$push:{skills:'PHP'}})



//To show the updated data
db.students.findOne({regno:'2021IT01'}


